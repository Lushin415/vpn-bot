package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"
)

// YooKassaPaymentRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–∫–∞—Å—Å–µ
type YooKassaPaymentRequest struct {
	Amount   YooKassaAmount   `json:"amount"`
	Capture  bool             `json:"capture"`
	Payment  YooKassaPayment  `json:"payment_method_data"`
	Metadata YooKassaMetadata `json:"metadata"`
}

// YooKassaAmount —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
type YooKassaAmount struct {
	Value    string `json:"value"`
	Currency string `json:"currency"`
}

// YooKassaPayment —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
type YooKassaPayment struct {
	Type string `json:"type"`
}

// YooKassaMetadata –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
type YooKassaMetadata struct {
	UserID int `json:"user_id"`
}

// YooKassaResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Æ–∫–∞—Å—Å—ã
type YooKassaResponse struct {
	ID      string `json:"id"`
	Status  string `json:"status"`
	Confirm struct {
		ConfirmationURL string `json:"confirmation_url"`
	} `json:"confirmation"`
}

// CreateYooKassaPayment —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
func CreateYooKassaPayment(userID int64, amount float64) (string, string, error) {
	url := "https://api.yookassa.ru/v3/payments"

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	amountStr := fmt.Sprintf("%.2f", amount)

	// –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	requestBody := YooKassaPaymentRequest{
		Amount: YooKassaAmount{
			Value:    amountStr,
			Currency: "RUB",
		},
		Capture: true,
		Payment: YooKassaPayment{
			Type: "bank_card",
		},
		Metadata: YooKassaMetadata{
			UserID: int(userID),
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Idempotence-Key", fmt.Sprintf("%d", time.Now().Unix())) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

	// üî¥ ! –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–∏ –∏–∑ .env
	req.SetBasicAuth(os.Getenv("YOOKASSA_SHOP_ID"), os.Getenv("YOOKASSA_SECRET_KEY"))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var yooResp YooKassaResponse
	if err := json.NewDecoder(resp.Body).Decode(&yooResp); err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Æ–∫–∞—Å—Å—ã: %v", err)
	}

	if yooResp.ID == "" || yooResp.Confirm.ConfirmationURL == "" {
		return "", "", fmt.Errorf("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Æ–∫–∞—Å—Å—ã")
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
	return yooResp.ID, yooResp.Confirm.ConfirmationURL, nil
}
