package services

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"vpn-bot/internal/db"
)

// YooKassaStatusResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç API –Æ–∫–∞—Å—Å—ã –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.
type YooKassaStatusResponse struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

// getYooKassaPaymentStatus –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —É –Æ–∫–∞—Å—Å—ã –ø–æ –µ–≥–æ ID.
func getYooKassaPaymentStatus(paymentID string) (string, error) {
	url := fmt.Sprintf("https://api.yookassa.ru/v3/payments/%s", paymentID)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	// üî¥ ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –∑–∞–¥–∞–Ω—ã –≤ .env.
	req.SetBasicAuth(os.Getenv("YOOKASSA_SHOP_ID"), os.Getenv("YOOKASSA_SECRET_KEY"))

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	var statusResp YooKassaStatusResponse
	if err := json.NewDecoder(resp.Body).Decode(&statusResp); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	return statusResp.Status, nil
}

// CheckPendingPayments –∏—â–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending", –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç—Å—è –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç,
// –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É –Æ–∫–∞—Å—Å—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î.
// –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VLESS-–∫–ª—é—á, –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º —Å–Ω–∏–º–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ.
func CheckPendingPayments() {
	var payments []db.Payment
	threshold := time.Now().Add(-3 * time.Minute)

	if err := db.DB.Where("status = ? AND created_at < ?", "pending", threshold).Find(&payments).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: %v", err)
		return
	}

	for _, payment := range payments {
		status, err := getYooKassaPaymentStatus(payment.YooKassaID)
		if err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ %s: %v", payment.YooKassaID, err)
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
		if err := db.DB.Model(&payment).Update("status", status).Error; err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ %s: %v", payment.YooKassaID, err)
			continue
		}

		// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω ‚Äì –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á, –∏–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
		if status == "succeeded" {
			activateVLESSKey(payment)
		} else {
			releaseReservedKey(payment.UserID)
		}
	}
}

// activateVLESSKey –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VLESS-–∫–ª—é—á –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
// üî¥ –î–∞–Ω–Ω—ã–π –∫–æ–¥ –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ webhook'–∞ ‚Äì —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!
func activateVLESSKey(payment db.Payment) {
	var key db.VLESSKey
	err := db.DB.Where("user_id = ? AND is_used = false", payment.UserID).First(&key).Error
	if err != nil {
		log.Printf("üî¥ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", payment.UserID, err)
		return
	}

	now := time.Now()
	if err := db.DB.Model(&key).Updates(db.VLESSKey{
		IsUsed:     true,
		AssignedAt: &now,
	}).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ SendMessage –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é)
	SendMessage(int64(payment.UserID), "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à VLESS-–∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
}

// releaseReservedKey —Å–Ω–∏–º–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.
func releaseReservedKey(userID int) {
	if err := db.DB.Model(&db.VLESSKey{}).
		Where("user_id = ? AND is_used = false", userID).
		Updates(map[string]interface{}{
			"reserved_until": nil,
			"user_id":        nil,
		}).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ SendMessage –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é)
	SendMessage(int64(userID), "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å–Ω—è—Ç–æ.")
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
// üî¥ ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API.
func SendMessage(chatID int64, text string) {
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", chatID, text)
}
