package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"vpn-bot/internal/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback'–∏)
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	if update.Message != nil {
		switch update.Message.Text {
		case "/start":
			sendStartMenu(bot, update.Message.Chat.ID)
		case "/support":
			sendSupportInfo(bot, update.Message.Chat.ID)
		case "/buy":
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
			sendServerSelection(bot, update.Message.Chat.ID)
		default:
			sendUnknownCommand(bot, update.Message.Chat.ID)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline-–∫–Ω–æ–ø–∫–∏)
	if update.CallbackQuery != nil {
		handleCallback(bot, update.CallbackQuery)
	}
}

// sendStartMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func sendStartMenu(bot *tgbotapi.BotAPI, chatID int64) {
	text := "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
			tgbotapi.NewKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
			tgbotapi.NewKeyboardButton("üì® –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é: %v", err)
	}
}

// sendSupportInfo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
func sendSupportInfo(bot *tgbotapi.BotAPI, chatID int64) {
	// üî¥ ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ @YourSupportChat –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!
	text := "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ: @YourSupportChat"
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: %v", err)
	}
}

// sendUnknownCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
func sendUnknownCommand(bot *tgbotapi.BotAPI, chatID int64) {
	text := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendServerSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ª–æ–∫–∞—Ü–∏–π)
func sendServerSelection(bot *tgbotapi.BotAPI, chatID int64) {
	var servers []db.Server
	if err := db.DB.Where("is_active = ?", true).Find(&servers).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.")
		bot.Send(msg)
		return
	}

	if len(servers) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ üòû")
		bot.Send(msg)
		return
	}

	text := "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:"
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, server := range servers {
		btn := tgbotapi.NewInlineKeyboardButtonData(server.Name, fmt.Sprintf("select_server_%d", server.ID))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	if strings.HasPrefix(data, "select_server_") {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
		serverIDStr := strings.TrimPrefix(data, "select_server_")
		serverID, err := strconv.Atoi(serverIDStr)
		if err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è serverID: %v", err)
			return
		}
		sendTariffSelection(bot, callback.Message.Chat.ID, serverID)
	} else if strings.HasPrefix(data, "buy_") {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞, —Ñ–æ—Ä–º–∞—Ç: buy_<serverID>_<–º–µ—Å—è—Ü–µ–≤>
		parts := strings.Split(data, "_")
		if len(parts) < 3 {
			log.Printf("üî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏: %s", data)
			return
		}
		serverID, err := strconv.Atoi(parts[1])
		if err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è serverID –≤ callback: %v", err)
			return
		}
		months, err := strconv.Atoi(parts[2])
		if err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ callback: %v", err)
			return
		}
		// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
		reserveKeyAndCreatePayment(bot, callback.Message.Chat.ID, serverID, months)
	} else {
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
		bot.Send(msg)
	}
}

// sendTariffSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
func sendTariffSelection(bot *tgbotapi.BotAPI, chatID int64, serverID int) {
	var server db.Server
	if err := db.DB.First(&server, serverID).Error; err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		bot.Send(msg)
		return
	}

	text := fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä *%s*.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", server.Name)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1 –º–µ—Å—è—Ü - 500‚ÇΩ", fmt.Sprintf("buy_%d_1", serverID)),
			tgbotapi.NewInlineKeyboardButtonData("3 –º–µ—Å—è—Ü–∞ - 1425‚ÇΩ (-5%%)", fmt.Sprintf("buy_%d_3", serverID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("6 –º–µ—Å—è—Ü–µ–≤ - 2700‚ÇΩ (-10%%)", fmt.Sprintf("buy_%d_6", serverID)),
			tgbotapi.NewInlineKeyboardButtonData("12 –º–µ—Å—è—Ü–µ–≤ - 5100‚ÇΩ (-15%%)", fmt.Sprintf("buy_%d_12", serverID)),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞: %v", err)
	}
}
