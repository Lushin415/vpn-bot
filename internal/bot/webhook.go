package bot

import (
	"encoding/json"
	"log"
	"net/http"
	"time"

	"gorm.io/gorm"
	"vpn-bot/internal/db"
	"vpn-bot/internal/services"
)

// YooKassaWebhook –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –Æ–∫–∞—Å—Å—ã.
type YooKassaWebhook struct {
	Object struct {
		ID     string `json:"id"`
		Status string `json:"status"`
	} `json:"object"`
}

// StartWebhook –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç –Æ–∫–∞—Å—Å—ã.
// üî¥ ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 8080 –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.
func StartWebhook() {
	http.HandleFunc("/yookassa-webhook", handleYooKassaWebhook)
	log.Println("‚úÖ –í–µ–±-—Ö—É–∫ –Æ–∫–∞—Å—Å—ã –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatalf("üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// handleYooKassaWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –Æ–∫–∞—Å—Å—ã.
func handleYooKassaWebhook(w http.ResponseWriter, r *http.Request) {
	var webhook YooKassaWebhook
	if err := json.NewDecoder(r.Body).Decode(&webhook); err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—Ö—É–∫–∞: %v", err)
		http.Error(w, "Bad Request", http.StatusBadRequest)
		return
	}

	paymentID := webhook.Object.ID
	status := webhook.Object.Status
	log.Printf("–ü–æ–ª—É—á–µ–Ω –≤–µ–±-—Ö—É–∫: PaymentID=%s, —Å—Ç–∞—Ç—É—Å=%s", paymentID, status)

	// –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î –ø–æ YooKassaID.
	var payment db.Payment
	if err := db.DB.Where("yoo_kassa_id = ?", paymentID).First(&payment).Error; err != nil {
		log.Printf("üî¥ –ü–ª–∞—Ç–µ–∂ —Å ID %s –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", paymentID, err)
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î.
	if err := db.DB.Model(&payment).Update("status", status).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º VLESS-–∫–ª—é—á; –∏–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ.
	if status == "succeeded" {
		activateVLESSKey(payment)
	} else {
		releaseReservedKey(payment.UserID)
	}

	w.WriteHeader(http.StatusOK)
}

// activateVLESSKey –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VLESS-–∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
func activateVLESSKey(payment db.Payment) {
	var key db.VLESSKey
	// –ò—â–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
	err := db.DB.Where("user_id = ? AND is_used = false", payment.UserID).First(&key).Error
	if err == gorm.ErrRecordNotFound {
		log.Printf("üî¥ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω", payment.UserID)
		return
	} else if err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–∞: %v", err)
		return
	}

	now := time.Now()
	if err := db.DB.Model(&key).Updates(db.VLESSKey{
		IsUsed:     true,
		AssignedAt: &now,
	}).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
	services.SendMessage(int64(payment.UserID), "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à VLESS-–∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
}

// releaseReservedKey —Å–Ω–∏–º–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.
func releaseReservedKey(userID int) {
	if err := db.DB.Model(&db.VLESSKey{}).
		Where("user_id = ? AND is_used = false", userID).
		Updates(map[string]interface{}{
			"reserved_until": nil,
			"user_id":        nil,
		}).Error; err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	services.SendMessage(int64(userID), "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å–Ω—è—Ç–æ.")
}
