package handlers

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"vpn-bot/internal/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// getAdminID –ø–æ–ª—É—á–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
func getAdminID() int64 {
	adminIDStr := os.Getenv("ADMIN_TELEGRAM_ID") // üî¥ ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_TELEGRAM_ID –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
	adminID, err := strconv.ParseInt(adminIDStr, 10, 64)
	if err != nil {
		log.Fatalf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ADMIN_TELEGRAM_ID: %v", err)
	}
	return adminID
}

// ListServersHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /listservers –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
func ListServersHandler(bot *tgbotapi.BotAPI, chatID int64) {
	if chatID != getAdminID() {
		bot.Send(tgbotapi.NewMessage(chatID, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π
	var result []struct {
		Name      string
		IP        string
		FreeKeys  int
		TotalKeys int
		IsActive  bool
	}

	err := db.DB.Raw(`
		SELECT s.name, s.ip,
			COUNT(CASE WHEN k.is_used = false THEN 1 END) AS free_keys,
			COUNT(k.id) AS total_keys,
			s.is_active
		FROM servers s
		LEFT JOIN vless_keys k ON s.id = k.server_id
		GROUP BY s.id
		ORDER BY s.name
	`).Scan(&result).Error
	if err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"))
		return
	}

	message := "üì° –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
	for _, server := range result {
		status := "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
		if !server.IsActive {
			status = "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
		}
		message += fmt.Sprintf(
			"\nüåç *%s* (%s)\nüîë –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: %d / %d\n%s\n",
			server.Name, server.IP, server.FreeKeys, server.TotalKeys, status,
		)
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

// BroadcastHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
func BroadcastHandler(bot *tgbotapi.BotAPI, chatID int64, broadcastText string) {
	if chatID != getAdminID() {
		bot.Send(tgbotapi.NewMessage(chatID, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var users []db.User
	err := db.DB.Select("telegram_id").Find(&users).Error
	if err != nil {
		log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
		return
	}

	sent, failed := 0, 0
	for _, user := range users {
		msg := tgbotapi.NewMessage(user.TelegramID, broadcastText)
		_, err := bot.Send(msg)
		if err != nil {
			failed++
		} else {
			sent++
		}
	}

	response := fmt.Sprintf("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n‚ùå –û—à–∏–±–æ–∫: %d", sent, failed)
	bot.Send(tgbotapi.NewMessage(chatID, response))
}

// HandleAdminCommand –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func HandleAdminCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	if text == "/listservers" {
		ListServersHandler(bot, chatID)
	} else if strings.HasPrefix(text, "/broadcast") {
		// –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>
		parts := strings.SplitN(text, " ", 2)
		if len(parts) < 2 || strings.TrimSpace(parts[1]) == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>"))
			return
		}
		BroadcastHandler(bot, chatID, parts[1])
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞"))
	}
}
